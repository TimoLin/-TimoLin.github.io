[{"content":"Hi there 👋 🔭 I’m currently working on LES-FPV/FGM of Turbulent Spray Combustion. 🌱 My research interest: LES, Flamelet models, Spray combustion, Turbulent inlet condions, OpenFOAM\u0026hellip; :floppy_disk: I\u0026rsquo;m good at: OpenFOAM, Ansys Fluent, ICEM, Matlab, Tecplot, Paraview 👯 I use daily: Vim, Python, Git, C++, Fortran, LaTeX :sparkles: Linux is the best Check the documentation: https://stack.jimmycai.com/ Want a site like this?. Check out hugo-theme-stack-stater The image copyright belongs to Cerfacs.\n","date":"2023-09-16T00:00:00Z","image":"https://TimoLin.github.io/p/about-me/cover_hu638a6381049d4f837d8f60fa38ed8334_483098_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/about-me/","title":"About me"},{"content":"问题描述 在使用OpenFOAM的lagrangian求解器（例如sprayFoam）时，并行计算完成后，reconstructPar出现如下错误：\n1 2 3 4 5 6 7 8 9 10 --\u0026gt; FOAM FATAL ERROR: cell, tetFace and tetPt search failure at position (-0.0378579 0.000214455 0.0202072) for requested cell 6154 From function void Foam::particle::initCellFacePt() in file /public1/home/sc50027/OpenFOAM/OpenFOAM-2.3.1/src/lagrangian/basic/lnInclude/particleI.H at line 758. FOAM aborting Aborted (core dumped) 问题原因 这个错误是由于在并行计算过程中，粒子的位置在某个分区的边界上，导致了粒子的位置无法被正确的定位到某个cell上。\n可以查阅相关的Post与Bug Report。\n但是似乎并没有一个很好的解决方案，对于本文的问题，我们发现计算过程和结果并没有受到影响，所以我们想要的是reconstructPar来得到最终的计算结果。\n解决方案 定位是那个分区processor出现了问题，如果该分区的粒子结果不重要，可以考虑直接舍弃掉出问题的processor中的粒子结果。\n在reconstruct.ini中指定时间步和要舍弃的processor ID，例如：\n1 2 0.15 (22,35,122) 0.21 (30) 修改代码（见下一节），使得reconstructPar在出现错误时，不会终止，而是舍弃指定的processor并继续执行，直到所有的processor都被处理完毕。\n显示当前处理的processor ID，当程序出现错误时，可以知道是哪个processor出现了问题 根据第1步的报错，写入配置文件reconstruct.ini 读入用户指定的配置文件，获取各个时间步下需要舍弃的processor ID，并在处理时跳过这些processor ID 代码示例 需要修改 src/parallel/reconstruct/reconstruct/reconstructLagrangianPositions.C 文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // * * * * * * * * * * * * * * * Global Functions * * * * * * * * * * * * * // void Foam::reconstructLagrangianPositions ( const polyMesh\u0026amp; mesh, const word\u0026amp; cloudName, const PtrList\u0026lt;fvMesh\u0026gt;\u0026amp; meshes, const PtrList\u0026lt;labelIOList\u0026gt;\u0026amp; faceProcAddressing, const PtrList\u0026lt;labelIOList\u0026gt;\u0026amp; cellProcAddressing ) { passiveParticleCloud lagrangianPositions ( mesh, cloudName, IDLList\u0026lt;passiveParticle\u0026gt;() ); DynamicList\u0026lt;scalar\u0026gt; times(0); DynamicList\u0026lt;List\u0026lt;scalar\u0026gt; \u0026gt; regions(0); word fName = \u0026#34;reconstruct.ini\u0026#34;; IFstream file(fName); if (!file.good()) { Info \u0026lt;\u0026lt; \u0026#34;File \u0026#34; \u0026lt;\u0026lt; fName \u0026lt;\u0026lt; \u0026#34; not found.\u0026#34; \u0026lt;\u0026lt; endl; return; } else { scalar t; scalarList r; while (file \u0026gt;\u0026gt; t) { times.append(t); file \u0026gt;\u0026gt; r; regions.append(r); } } forAll(meshes, i) { Info \u0026lt;\u0026lt; \u0026#34;Mesh I = \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; bool skip = false; forAll(times, j) { if (mesh.time().timeName() == name(times[j])) { forAll(regions[j], k) { if (i == regions[j][k]) { skip = true; break; } } break; } } if (!skip) { const labelList\u0026amp; cellMap = cellProcAddressing[i]; // faceProcAddressing not required currently. // const labelList\u0026amp; faceMap = faceProcAddressing[i]; Cloud\u0026lt;passiveParticle\u0026gt; lpi(meshes[i], cloudName, false); forAllConstIter(Cloud\u0026lt;passiveParticle\u0026gt;, lpi, iter) { const passiveParticle\u0026amp; ppi = iter(); // // Inverting sign if necessary and subtracting 1 from // // faceProcAddressing // label mappedTetFace = mag(faceMap[ppi.tetFace()]) - 1; lagrangianPositions.append ( new passiveParticle ( mesh, ppi.position(), cellMap[ppi.cell()], false ) ); } } } IOPosition\u0026lt;Cloud\u0026lt;passiveParticle\u0026gt; \u0026gt;(lagrangianPositions).write(); } ","date":"2024-07-20T00:00:00Z","image":"https://TimoLin.github.io/p/openfoam-lagrangian%E6%B1%82%E8%A7%A3%E5%99%A8-cell-tetface-and-tetpt-search-failure-%E9%94%99%E8%AF%AF/cover_hu3f6d90e53811c912e49ab16dda3cf61d_10062_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/openfoam-lagrangian%E6%B1%82%E8%A7%A3%E5%99%A8-cell-tetface-and-tetpt-search-failure-%E9%94%99%E8%AF%AF/","title":"OpenFOAM lagrangian求解器 **cell, tetFace and tetPt search failure** 错误"},{"content":"需求 对于二维云图，Paraview中默认Y轴的标题为横向文字（下图左），并且不支持旋转文字的方向，相关讨论可以在这些帖子中看到。\nParaview Allow rotation of axes grid title Paraview Rotate the Text filter 但是有时为了图片更加美观，我们希望Y轴的title是垂直放置的，如下图（右）所示。\n这里有个教程：\n","date":"2024-03-27T00:00:00Z","image":"https://TimoLin.github.io/p/paraview%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%94%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/cover_hu8cee2441eeb8f12d0698c871cad182d0_75494_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/paraview%E4%B8%AD%E5%9E%82%E7%9B%B4%E6%94%BE%E7%BD%AE%E6%96%87%E6%9C%AC%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/","title":"Paraview中垂直放置文本的一种方法"},{"content":"需求很简单 跨平台支持（Windows/Linux） 剪贴板同步（联网或局域网均可） 无需手动推送，复制到剪贴板后自动同步 但是试用了很多剪贴板管理工具，总是有各种各样的问题：\n(1) Ditto 缺点： 只支持Windows (2) Barrier 优点：日常用作虚拟KVM管理，支持剪贴板同步 缺点：同步功能总是会莫名失灵，不支持文件复制，复制图片等较大内容时（几百KB~几兆），会导致KVM十分卡顿 (3) Kde-connect 优点：多平台同步（Windows/Linux/MacOS/ios/Android），支持发送文件 缺点：Win10下使用会占用剪贴板，使得 Ctrl-C/V 失灵 (4) CopyQ 优点：很棒，基本能满足我的使用需求 缺点：同步功能需要第三方软件（坚果云/Dropbox等） 剪贴板管理工具-CopyQ 这里只介绍同步功能的设置方法，其他功能请参考官方文档或网络资料。\n安装 Ubuntu-22.04 1 2 3 sudo add-apt-repository ppa:hluk/copyq sudo apt update sudo apt install copyq Windows\n下载安装包CopyQ-.-setup.exe 配置同步功能 同步功能是将剪贴板存储到指定的同步文件夹内， 因此需要使用第三方云盘同步软件，例如坚果云、Dropbox等有跨平台支持的云盘服务。\n以Dropbox为例，Ubuntu下Dropbox的同步文件夹位于/home/user/Dropbox，Windows下位于D:\\Dropbox:\nUbuntu-22.04 创建CopyQ的同步文件夹/home/user/Dropbox/CopyQ。 打开CopyQ，查看文件-首选项-标签：\n默认剪贴板存放在\u0026amp;clipboard标签页下。 设置文件-首选项-条目-同步， 标签页设置为上图中的标签\u0026amp;clipboard，文件夹路径设置为刚刚创建的同步文件夹/home/user/Dropbox/CopyQ，点击应用。\n设置完成。 Windows 设置方法相同，但是要注意Windows下默认的标签为剪贴板(\u0026amp;C)： 复制任意文字或图片后，可以看到同步文件夹下生成的copyq_\u0026lt;timestamp\u0026gt;.*文件，经由Dropbox自动同步到Windows端。 ","date":"2024-03-16T00:00:00Z","image":"https://TimoLin.github.io/p/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88-copyq/cover_hud7ef11c5b6e88b15bf787f241ef12c84_26379_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88-copyq/","title":"跨平台剪贴板同步方案-CopyQ"},{"content":"说明 编辑器：GVIM-9.0 LaTeX插件：vim-tex或者vim-latex PDF阅读器：Okular 本方案参考了StackExchange Answer\n1. LaTeX编译时打开SyncTeX支持 编译时打开SyncTeX支持才能够在tex与PDF之间进行跳转。 例如使用pdflatex时：\n1 pdflatex -synctex=1 file.tex 或者使用latexmk时：\n1 latexmk -xelatex -synctex=1 file.tex 上述选项会生成一个file.synctex.gz文件。\n2. Tex源码定位到PDF（Tex-to-PDF） Okular支持打开PDF时指定到行位置，将下面的函数添加到~/.vimrc中：\n对于vim-tex插件：\n1 2 3 4 5 6 7 8 9 function! OkularFind() let this_tex_file = expand(\u0026#39;%:p\u0026#39;) let master_tex_file = b:vimtex.tex let pdf_file = fnamemodify(master_tex_file, \u0026#39;:p:r\u0026#39;) . \u0026#39;.pdf\u0026#39; let line_number = line(\u0026#39;.\u0026#39;) let okular_cmd = \u0026#39;okular --noraise --unique \u0026#34;\u0026#39; . pdf_file . \u0026#39;#src:\u0026#39; . line_number . \u0026#39; \u0026#39; . this_tex_file . \u0026#39;\u0026#34;\u0026#39; let s:okular_job = job_start([\u0026#39;/bin/bash\u0026#39;, \u0026#39;-c\u0026#39;, okular_cmd]) endfunction nnoremap \u0026lt;leader\u0026gt;f :call OkularFind()\u0026lt;cr\u0026gt; 对于vim-latex插件：\n1 2 3 4 5 6 7 8 9 function! OkularFind() let this_tex_file = expand(\u0026#39;%:p\u0026#39;) let master_tex_file = Tex_GetMainFileName() let pdf_file = fnamemodify(master_tex_file, \u0026#39;:p:r\u0026#39;) . \u0026#39;.pdf\u0026#39; let line_number = line(\u0026#39;.\u0026#39;) let okular_cmd = \u0026#39;okular --noraise --unique \u0026#34;\u0026#39; . pdf_file . \u0026#39;#src:\u0026#39; . line_number . \u0026#39; \u0026#39; . this_tex_file . \u0026#39;\u0026#34;\u0026#39; let s:okular_job = job_start([\u0026#39;/bin/bash\u0026#39;, \u0026#39;-c\u0026#39;, okular_cmd]) endfunction nnoremap \u0026lt;leader\u0026gt;f :call OkularFind()\u0026lt;cr\u0026gt; 其中，二者的区别是，对于多文件的项目如何找到Tex项目的主文件：\n1 2 3 4 # vim-tex let master_tex_file = b:vimtex.tex # vim-latex let master_tex_file = Tex_GetMainFileName() 在gvim下将光标移动到想要预览的内容，通过\\f来打开Okular并指定到要预览的内容。\n3. PDF定位到Tex源码（PDF-To-Tex） 在Okular中设置以下：\n设置 - Settings 配置Okular - Configure Okular 编辑器 - Editor 选择自定义文本编辑器 - Custom Text Editor 在命令框中填入下列命令 - Input the following command 1 gvim --remote +%l %f 在浏览模式下，使用快捷键Shift+鼠标左键单击想要查看源码的内容，即可跳转到相应的Tex源码文件位置中。\n","date":"2024-02-01T00:00:00Z","image":"https://TimoLin.github.io/p/gvim%E4%B8%8B%E7%9A%84latex%E7%BC%96%E8%AF%91%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/cover_hu321bd80fdc000e5985c08e37002241e9_134486_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/gvim%E4%B8%8B%E7%9A%84latex%E7%BC%96%E8%AF%91%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88/","title":"GVIM下的LaTeX编译实时预览"},{"content":"1. 打开Fluent/ICEM出现许可证错误 版本：22R1 权限：root安装至/usr/ansys_inc，普通用户使用 系统：CentOS 7 查看对应的日志文件 ~/.ansys/ansyscl.localhost.*.log：\n1 2 3 4 5 6 7 2024/01/08 23:10:12 INFO ANSYSLI_CMD=/usr/ansys_inc/v221/licensingclient/linx64/ansyscl -acl 19510.29709 -nodaemon -log ~/.ansys/ansyscl.localhost.19510.29709.log 2024/01/08 23:10:12 INFO ANSYSLI_INITIALIZATION_FILE=\u0026#39;/usr/ansys_inc/shared_files/licensing/ansyslmd.ini\u0026#39; 2024/01/08 23:10:12 INFO ANSYSLI_PRODORD_FILE=\u0026#39;/usr/ansys_inc/shared_files/licensing/prodord/ansysli.prodord.xml\u0026#39; 2024/01/08 23:10:12 INFO ANSYSLI_TIMEOUT_FLEXLM=15 2024/01/08 23:10:12 ERROR /usr/ansys_inc/shared_files/licensing/ansyslmd.ini is invalid. Could not read option file /usr/ansys_inc/shared_files/licensing/ansyslmd.ini. 2024/01/08 23:10:12 ERROR Exiting. 发现Ansys的许可证管理器无法正确读取配置文件，排除shared_files下的文件不存在等弱智原因后，可能和文件夹的权限有关系：\n1 2 # 查看文件权限信息 ls -lht /usr/ansys_inc/shared_files/ 输出如下，文件的所有权为root，是导致许可证无法读取的原因：\n1 2 3 4 drwxr-xr-x. 9 root root 159 May 12 2023 licensing drwxr-xr-x. 3 root root 20 Nov 13 2021 bin drwxr-xr-x. 9 root root 112 Nov 13 2021 lib drwxr-xr-x. 3 root root 20 Nov 13 2021 syslib 修改文件夹所有权为普通用户，以解决许可证文件访问问题：\n1 2 3 4 # 进入root su # 修改权限 chown $USER -R /usr/ansys_inc/shared_files 打开Fluent或ICEM，查看问题是否已解决。\n2. 打开ICEM报错 终端输入icemcfd，报错如下：\n1 2 3 4 5 6 7 8 9 10 11 ICEM_ACN is \u0026#34;/usr/ansys_inc/v221/icemcfd/linux64_amd\u0026#34;. LD_LIBRARY_PATH is \u0026#34;/usr/ansys_inc/v221/icemcfd/linux64_amd/lib:/usr/ansys_inc/v221/icemcfd/linux64_amd/bin:/usr/ansys_inc/v221/icemcfd/linux64_amd/dif/iges:/usr/ansys_inc/v221/icemcfd/linux64_amd/../../Framework/bin/Linux64:/usr/ansys_inc/v221/icemcfd/linux64_amd/../../tp/IntelCompiler/2019.3.199/linx64/lib/intel64:/usr/ansys_inc/v221/icemcfd/linux64_amd/../../tp/qt_fw/5.9.6/Linux64/lib:/usr/ansys_inc/v221/icemcfd/linux64_amd/../../tp/hdf5/1_10_5/linx64/lib\u0026#34;. args = Window information: depth = 24 class = 4 visual depth = 24 class = 4 can\u0026#39;t load font screen14, using variable Signal 11 caught! segmentation violation - exiting after doing an emergency save Exiting... Exit from ICEM CFD 解决方案，安装对应的字体文件：\nCentOS 1 yum install xorg-x11-fonts-* Ubuntu 1 apt-get install xfonts-75dpi xfonts-100dpi 3. Ubuntu打开Fluent报错 通常发生在新系统上第一次安装Ansys后，报错如下：\n1 2 3 4 5 6 7 8 /software/ansys_inc/V22R1/v221/fluent/bin/fluent: 69: [[: not found /software/ansys_inc/V22R1/v221/fluent/bin/fluent: 813: [[: not found /software/ansys_inc/V22R1/v221/fluent/bin/fluent: 836: [[: not found /software/ansys_inc/V22R1/v221/fluent/bin/fluent: 838: [[: not found /software/ansys_inc/V22R1/v221/fluent/fluent22.1.0/bin/fluent -r22.1.0 /software/ansys_inc/V22R1/v221/fluent/fluent22.1.0/bin/fluent: 112: [[: not found /software/ansys_inc/V22R1/v221/fluent/fluent22.1.0/bin/fluent: 744: [[: not found /software/ansys_inc/V22R1/v221/fluent/fluent22.1.0/bin/fluent: 1108: [[: not found Ubuntu默认使用dash，确实一些shell特性，需要将其修改为bash：\n1 2 # 运行下面的命令，并在弹出的窗口中选择No sudo dpkg-reconfigure dash 4. Ansys 23R1许可证管理器 Get System HostID Information报错 提示lmutil文件不存在，但是实际是有这个文件：\nCentOS 7.6 手动运行lmutil，报错如下： 1 /lib64/ld-lsb-x86-64.so.3: bad ELF interpreter: No such file or directory 解决方案： 1 yum install redhat-lsb Ubuntu 22.04 参考： 1 sudo ln -s /lib64/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3 ","date":"2024-01-09T00:00:00Z","image":"https://TimoLin.github.io/p/linux%E4%B8%8Bansys%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/cover_hud79406347d9eb15bf0fac28bd8bb8245_10206_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/linux%E4%B8%8Bansys%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","title":"Linux下Ansys安装与运行的常见问题"},{"content":"参考博文CentOS7.2 部署VNC服务记录。\n问题描述 首先在CentOS-7.9中安装了tigervnc，并配置好了vncserver的自启动服务：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=simple # Clean any existing files in /tmp/.X11-unix environment ExecStartPre=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39; ExecStart=/usr/sbin/runuser -l userTest -c \u0026#34;/usr/bin/vncserver %i -geometry 1440x900\u0026#34; ExecStop=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39; [Install] WantedBy=multi-user.target 在未安装Miniconda环境之前，是可以正常启动的，包括重启系统后自启动，或者使用systemctl start/restart vncserver@\\:1.service进行手动启动/重启。\n安装Miniconda后，在普通用户userTest的.bashrc中会自动添加如下代码自动激活conda环境：\n1 2 3 4 5 6 7 8 9 10 11 12 __conda_setup=\u0026#34;$(\u0026#39;/home/nuaa/miniconda3/bin/conda\u0026#39; \u0026#39;shell.bash\u0026#39; \u0026#39;hook\u0026#39; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__conda_setup\u0026#34; else if [ -f \u0026#34;/home/nuaa/miniconda3/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;/home/nuaa/miniconda3/etc/profile.d/conda.sh\u0026#34; else export PATH=\u0026#34;/home/nuaa/miniconda3/bin:$PATH\u0026#34; fi fi unset __conda_setup # \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; 然后，vncserver服务就无法开机自启动或者使用systemctl启动了，具体报错如下：\n1 2 3 4 5 (imsettings-check:31898): GLib-GIO-CRITICAL **: 21:56:03.842: g_dbus_proxy_call_sync_internal: assertion \u0026#39;G_IS_DBUS_PROXY (proxy)\u0026#39; failed GLib-GIO-Message: 21:56:03.854: Using the \u0026#39;memory\u0026#39; GSettings backend. Your settings will not be saved or shared with other applications. ** (process:31798): WARNING **: 21:56:03.861: Could not make bus activated clients aware of XDG_CURRENT_DESKTOP=GNOME environment variable: Could not connect: Connection refused 原因 Miniconda环境下的dbus-daemon与CentOS系统中的dubs-daemon存在冲突：\n1 2 $ which dbus-daemon ~/miniconda3/bin/dbus-daemon 解决方案 避免普通用户userTest下Miniconda环境的自动加载，将自动加载环境的代码修改为下面的bash函数形式，需要使用miniconda环境时，运行miniconda来激活环境：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 miniconda(){ __conda_setup=\u0026#34;$(\u0026#39;/home/nuaa/miniconda3/bin/conda\u0026#39; \u0026#39;shell.bash\u0026#39; \u0026#39;hook\u0026#39; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__conda_setup\u0026#34; else if [ -f \u0026#34;/home/nuaa/miniconda3/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;/home/nuaa/miniconda3/etc/profile.d/conda.sh\u0026#34; else export PATH=\u0026#34;/home/nuaa/miniconda3/bin:$PATH\u0026#34; fi fi unset __conda_setup # \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; } 重启vncserver服务或者重启系统：\n1 2 systemctl stop vncserver@\\:1.service systemctl start vncserver@\\:1.service VNC无法登录的一个解决方法 有时在CentoOS登录界面输入密码无效，多次输入密码错误后卡住，或者无法登录，可能是VNC桌面卡死了。\n方法1: 重启VNC SSH登录到目标机器，重启VNC的系统服务。但该方法会使得VNC桌面中的任务随之杀掉。 1 2 systemctl stop vncserver@\\:1.service systemctl start vncserver@\\:1.service 方法2： loginctl解锁桌面（参考博文） 首先查看当前登录了 1 loginctl list-sessions 输出如下： 1 2 3 4 5 6 SESSION UID USER SEAT c1 1000 YOUR_USER_NAME c2 42 gdm seat0 20210 1000 YOUR_USER_NAME 3 sessions listed. 解锁VNC登录界面： 1 2 3 4 # 一般VNC的session id可能是数字或者c1，尝试下述命令 loginctl unlock-session 20210 或 loginctl unlock-session c1 ","date":"2023-10-25T00:00:00Z","image":"https://TimoLin.github.io/p/centos%E4%B8%8Bminiconda%E5%AF%BC%E8%87%B4vnc%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/cover_huda79a7e7c3dc128829d9435f28531a06_64874_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/centos%E4%B8%8Bminiconda%E5%AF%BC%E8%87%B4vnc%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","title":"CentOS下Miniconda导致VNC无法启动的解决方案"},{"content":"宿主机：Ubuntu-22.04 Docker容器：Ubuntu-18.04 OpenFOAM版本：v2.3.1\n问题描述 Ubuntu-22.04中的gcc-11版本过高，无法编译低版本OpenFOAM（v2.3.1需要gcc-4.8~5.5）。\n解决方案 创建基于Ubuntu-18.04的Docker容器 搭建OpenFOAM编译环境 建立宿主机OpenFOAM代码与算例的目录到docker目录的映射 宿主机下修改代码 Docker容器中编译代码，执行算例 宿主机下Tecplot/Paraview查看结果 依赖 查看官方教程安装docker。 设置免ROOT使用docker命令 具体步骤 拉取OpenFOAM231-docker脚本 例如放到$HOME/github文件夹\n1 2 cd $HOME/github git clone https://github.com/TimoLin/openfoam231-docker.git 或者\n1 git clone git@github.com:TimoLin/openfoam231-docker.git 创建of231镜像 运行脚本prepareOpenFOAM231.sh:\n1 ./prepareOpenFOAM231.sh 输出如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ******************************************************* Following Docker containers are present on your system: ******************************************************* CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 64ee332b50a6 caecf4ca1e48 \u0026#34;/bin/sh -c \u0026#39;sh -c \\\u0026#34;…\u0026#34; 2 hours ago Exited (1) 2 hours ago crazy_benz WM_CC ******************************************************* Creating Docker OpenFOAM container openfoam231 8ea1e4429ac9ea43df1c58ed206427383771c9724e757b369686d9440e2dc465 Container openfoam231 was created. ******************************************************* Run the ./startOpenFOAM script to launch container ******************************************************* 使用镜像 首先在宿主机$HOME/OpenFOAM文件夹下创建OpenFOAM环境变量文件of-env.bashrc，内容如下：\n1 2 3 4 5 source $HOME/OpenFOAM/OpenFOAM-2.3.1/etc/bashrc WM_NCOMPPROCS=4 WM_MPLIB=SYSTEMOPENMPI export WM_CC=\u0026#39;gcc-5\u0026#39; export WM_CXX=\u0026#39;g++-5\u0026#39; export WM_NCOMPPROCS=4 export WM_MPLIB=SYSTEMOPENMPI 运行脚本startOpenFOAM231.sh\n1 ./startOpenFOAM231.sh 输出：\n1 2 Entering container openfoam231:8ea1e4429ac9... 8ea1e4429ac9% 在docker中激活openfoam环境：\n1 of231 最后可以编译或运行算例了。\nAppendix Docker镜像相关 创建docker镜像：\n1 docker build - \u0026lt; Dockerfile 打tag：\n1 docker tag REPLACE_WITH_DOCKER_IMAGE_ID ztnuaa/openfoam231:latest 登录dockerhub：\n1 docker login 推送到dockerhub：\n1 docker push ztnuaa/openfoam231:latest 向已有的镜像中添加挂载目录 参考这个方法stackoverflow：\n首先关闭Docker服务 1 systemctl stop docker.service 找到容器ID与文件路径 1 2 3 4 5 # 在该命令的输出中，查找你想要修改的容器的ID docker container ls -a # 替换“\u0026lt;\u0026gt;”为你的ID，找到容器文件的路径 cd /var/lib/docker/containers/\u0026lt;YOUR_CONTAINER_ID\u0026gt; 查看目录下的文件ls -lht，比如输出为： 1 2 3 4 5 6 7 8 9 -rw-r----- 1 root root 7.0M Dec 11 16:35 8ea1e4429ac9ea43df1c58ed206427383771c9724e757b369686d9440e2dc465-json.log -rw------- 1 root root 4.6K Dec 11 16:11 config.v2.json -rw------- 1 root root 1.6K Dec 11 16:11 hostconfig.json -rw-r--r-- 1 root root 13 Dec 11 16:11 hostname -rw-r--r-- 1 root root 174 Dec 11 16:11 hosts -rw-r--r-- 1 root root 806 Dec 11 16:11 resolv.conf -rw-r--r-- 1 root root 71 Dec 11 16:11 resolv.conf.hash drwx--x--- 2 root root 4.0K Sep 26 17:02 mounts drwx------ 2 root root 4.0K Sep 26 17:02 checkpoints 修改config.v2.json配置文件，找到“MountPoints”关键字，在其中添加你想要挂载的目录，例如： 原始内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026#34;MountPoints\u0026#34;: { \u0026#34;/etc/group\u0026#34;: { \u0026#34;Source\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;Destination\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;RW\u0026#34;: false, \u0026#34;Name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Relabel\u0026#34;: \u0026#34;ro\u0026#34;, \u0026#34;Propagation\u0026#34;: \u0026#34;rprivate\u0026#34;, \u0026#34;Spec\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Source\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;Target\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;ReadOnly\u0026#34;: true }, \u0026#34;SkipMountpointCreation\u0026#34;: false } } 挂载宿主机目录/home/\u0026lt;USER\u0026gt;/Data/simulation到容器目录/home/\u0026lt;USER\u0026gt;/calc下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026#34;MountPoints\u0026#34;: { \u0026#34;/etc/group\u0026#34;: { \u0026#34;Source\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;Destination\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;RW\u0026#34;: false, \u0026#34;Name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Relabel\u0026#34;: \u0026#34;ro\u0026#34;, \u0026#34;Propagation\u0026#34;: \u0026#34;rprivate\u0026#34;, \u0026#34;Spec\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Source\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;Target\u0026#34;: \u0026#34;/etc/group\u0026#34;, \u0026#34;ReadOnly\u0026#34;: true }, \u0026#34;SkipMountpointCreation\u0026#34;: false }, \u0026#34;/home/\u0026lt;USER\u0026gt;/calc\u0026#34;: { \u0026#34;Source\u0026#34;: \u0026#34;/home/\u0026lt;USER\u0026gt;/Data/simulation\u0026#34;, \u0026#34;Destination\u0026#34;: \u0026#34;/home/\u0026lt;USER\u0026gt;/calc\u0026#34;, \u0026#34;RW\u0026#34;: false, \u0026#34;Name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Relabel\u0026#34;: \u0026#34;ro\u0026#34;, \u0026#34;Propagation\u0026#34;: \u0026#34;rprivate\u0026#34;, \u0026#34;Spec\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;bind\u0026#34;, \u0026#34;Source\u0026#34;: \u0026#34;/home/\u0026lt;USER\u0026gt;/Data/simulation\u0026#34;, \u0026#34;Target\u0026#34;: \u0026#34;/home/\u0026lt;USER\u0026gt;/calc\u0026#34;, \u0026#34;ReadOnly\u0026#34;: true }, \u0026#34;SkipMountpointCreation\u0026#34;: false } } 重启docker服务： 1 systemctl start docker.service 进入容器： 1 docker start \u0026lt;YOUR_CONTAINER_ID\u0026gt; ","date":"2023-09-26T00:00:00Z","image":"https://TimoLin.github.io/p/ubuntu-22.04%E5%9C%A8docker%E4%B8%AD%E7%BC%96%E8%AF%91openfoam-2.3.1/cover_hu208b22714ee70f962b9c689b86ab5918_70440_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/ubuntu-22.04%E5%9C%A8docker%E4%B8%AD%E7%BC%96%E8%AF%91openfoam-2.3.1/","title":"Ubuntu-22.04在Docker中编译OpenFOAM-2.3.1"},{"content":"问题描述 Ubuntu 20.04在某次重启后卡在了启动界面，屏幕上有如下的信息：\n1 2 [ 0.260118] tpm tpm0: [Firmware Bug]: TPM interrupt not working, polling instead /dev/nvme0n1p3: clean, 200134/844470 files, 3645600/3777792 block 此时即无法进入tty界面（按ctrl+alt+F1至F6），又无法进入grub或者recovery\n解决方案 有一个解决方法是先进入Ubuntu LiveCD，将硬盘上的系统挂载到LiveCD上，再查找原因。参考该方法，将步骤翻译如下.\n从U盘启动 进入Uubunt 20.04 live cd，选择Try Ubuntu\n查找并挂载硬盘上的Ubuntu系统分区 如果不知道分区是哪个，可以使用GParted查看，或者打开终端输入sudo fdisk -l查看。\n1 2 3 4 5 #注意：将nvmeXX或nvmeXY替换为你自己的分区 #挂在根目录分区 sudo mount /dev/nvmeXX /mnt #如果有对boot做单独分区 sudo mount /dev/nvmeXY /mnt/boot 将硬盘系统分区挂载到LiveCD系统上 1 2 3 4 sudo mount --bind /dev /mnt/dev \u0026amp;\u0026amp; sudo mount --bind /dev/pts /mnt/dev/pts \u0026amp;\u0026amp; sudo mount --bind /proc /mnt/proc \u0026amp;\u0026amp; sudo mount --bind /sys /mnt/sys 更改root目录 1 sudo chroot /mnt 查找系统bug的原因 例如，本文中是因为libstdc++.so.6和nvidia显卡驱动的原因。\n首先，重新建立libstdc++.so.6的软链接：\n1 2 3 4 5 6 7 # 进入目录 cd /mnt/usr/lib/x86_64-linux-gnu # 查看libstdc++.so.6 ls -lht libstdc++.so.6 # 删除原始链接并重新链接到libstdc++.so.6.0.28 sudo rm libstdc++.so.6 sudo ln -s ./libstdc++.so.6.0.28 ./libstdc.so.6 卸载nvidia驱动\n1 2 3 4 sudo apt remove --purge nvidia-* sudo apt install ubuntu-desktop echo \u0026#39;nouveau\u0026#39; | tee -a /etc/modules sudo apt install ubuntu-desktop 如果apt有网络链接问题：\n1 echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt;/etc/resolv.conf 卸载硬盘分区 1 2 3 4 5 6 exit \u0026amp;\u0026amp; sudo umount /mnt/sys \u0026amp;\u0026amp; sudo umount /mnt/proc \u0026amp;\u0026amp; sudo umount /mnt/dev/pts \u0026amp;\u0026amp; sudo umount /mnt/dev \u0026amp;\u0026amp; sudo umount /mnt 重启系统 ","date":"2023-09-19T00:00:00Z","image":"https://TimoLin.github.io/p/ubuntu-20.04%E5%8D%A1%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/cover_hu505bd0c27825a619fe2e014e5fa01f43_136800_120x120_fill_box_smart1_3.png","permalink":"https://TimoLin.github.io/p/ubuntu-20.04%E5%8D%A1%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","title":"Ubuntu 20.04卡在启动界面的一个解决办法"},{"content":"更换国内源 \u0026amp; 更新 中科大软件源\n1 2 3 sudo sed -i \u0026#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g\u0026#39; /etc/apt/sources.list sudo apt update sudo apt dist-upgrade 安装软件 1 2 3 4 5 6 # 更换为zsh终端 sudo apt install zsh autojump sudo apt install vim ctags sudo apt install build-essential # 代理 sudo apt install proxychains 配置 配置Zsh: oh-my-zsh 将默认bash更换为zsh:\n1 chsh -s /bin/zsh 安装oh-my-zsh：\n1 sh -c \u0026#34;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\u0026#34; 配置代理: proxychains Proxychains可以使任何程序通过代理上网，给终端环境下的命令带来了很多便利。 修改/etc/proxychains.conf末尾行：\n1 socks4 127.0.0.1 9095 为（此处假设10808为Clash或V2Ray的代理端口）：\n1 socks5 127.0.0.1 10808 终端命令使用代理：\n1 2 3 4 5 # 普通命令 proxychains wget ** # sudo 命令 sudo proxychains apt update sudo proxychains apt distupgrade VIM配置 更换最新的Vim发行仓库并更新Vim\n1 2 3 sudo add-apt-repository ppa:jonathonf/vim sudo apt update sudo apt install vim VIM-Plug插件管理器 1 2 curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim coc.nvim (1) 安装coc依赖\n1 2 3 4 5 # C/C++ lsp sudo snap install ccls sudo apt install bear # Fortran lsp pip3 install fortran-language-server 插件安装，在vim命令模式下输入：\n1 :CocInstall coc-pyright (2) C/C++程序生成 compile_commands.json\n对采用cmake编译的程序，例如 FlameMaster\n1 2 3 4 # Recompile with `-DCMAKE_EXPORT_COMPILE_COMMANDS=1 option` cmake ../Repository -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=1 cmake --build . --parallel --target install --config Release cp compile_commands.json ../Repository/ 对直接采用 make 编译的程序，例如 OpenFOAM\n参考 教程.\n对较低版本的OpenFOAM，修改 OpenFOAM-2.3.1/wmake/wmake:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 +#------------------------------------------------------------------------------ +# check if bear is installed and we are not already running under bear +#------------------------------------------------------------------------------ + +if [ -z \u0026#34;${RUNNING_UNDER_BEAR}\u0026#34; ] ; then + if ! bear --version \u0026gt; /dev/null ; then + echo \u0026#34;WARNING: bear is not installed -\u0026gt; There will be no compile_commands.json output.\u0026#34; 1\u0026gt;\u0026amp;2 + elif printf \u0026#39;%s\\n%s\\n\u0026#39; \u0026#34;bear 3.0.0\u0026#34; \u0026#34;$(bear --version)\u0026#34; | sort -V -C ; then + #bear version \u0026gt;= 3.0.0 + export RUNNING_UNDER_BEAR=true + mkdir -p $FOAM_LIBBIN + bear --append --output $FOAM_LIBBIN/../compile_commands.json -- wmake $@ + exit $? + elif printf \u0026#39;%s\\n%s\\n\u0026#39; \u0026#34;bear 2.0.0\u0026#34; \u0026#34;$(bear --version)\u0026#34; | sort -V -C ; then + #bear version \u0026gt;= 2.0.0 + export RUNNING_UNDER_BEAR=true + mkdir -p $FOAM_LIBBIN + bear --append -o $FOAM_LIBBIN/../compile_commands.json wmake $@ + exit $? + else + echo \u0026#34;WARNING: bear version is below 2.0.0 -\u0026gt; There will be no compile_commands.json output.\u0026#34; 1\u0026gt;\u0026amp;2 + fi +fi 在 OpenFOAM-2.3.1/bin/tools 中添加vscode-settings。\nGenerate VSCode setting files:\n1 2 3 4 5 6 7 cd $WM_PROJECT_DIR mkdir .vscode ./bin/tools/vscode-setting \u0026gt; .vscode/settings.json # Clean OpenFOAM installation wclean all # Re-build ./Allwmake 创建软链接： VIM/coc.nvim:\n1 2 cd $WM_PROJECT_DIR ln -s ~/OpenFOAM/OpenFOAM-2.3.1/platforms/linux64GccDPOpt/compile_commands.json ./compile_commands.json (4) 附录:\ncoc-settings.json(位于 ~/.vim下): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \u0026#34;languageserver\u0026#34;: { \u0026#34;ccls\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;ccls\u0026#34;, \u0026#34;filetypes\u0026#34;: [\u0026#34;c\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;cpp\u0026#34;, \u0026#34;c++\u0026#34;, \u0026#34;objc\u0026#34;, \u0026#34;objcpp\u0026#34;], \u0026#34;rootPatterns\u0026#34;: [\u0026#34;.ccls\u0026#34;, \u0026#34;compile_commands.json\u0026#34;, \u0026#34;.git/\u0026#34;, \u0026#34;.root\u0026#34;], \u0026#34;initializationOptions\u0026#34;: { \u0026#34;cache\u0026#34;: { \u0026#34;directory\u0026#34;: \u0026#34;.cache/ccls\u0026#34; }, \u0026#34;highlight\u0026#34;: {\u0026#34;lsRanges\u0026#34;: true } } }, \u0026#34;fortran\u0026#34;: { \u0026#34;command\u0026#34;: \u0026#34;fortls\u0026#34;, \u0026#34;filetypes\u0026#34;: [\u0026#34;fortran\u0026#34;], \u0026#34;rootPatterns\u0026#34;: [\u0026#34;.fortls\u0026#34;, \u0026#34;.git/\u0026#34;] } } ","date":"2023-09-16T00:00:00Z","image":"https://TimoLin.github.io/p/%E6%88%91%E7%9A%84linux/linux_hu51fb83752bce9d90cca990fdc91ecfd0_44661_120x120_fill_q75_box_smart1.jpg","permalink":"https://TimoLin.github.io/p/%E6%88%91%E7%9A%84linux/","title":"我的Linux"},{"content":"Check my post in cfd-online\nAt August, I upgraded my UBUNTU 16.04 to 18.04. This version is great.\nHowever, I met a problem when starting ICEMCFD 18.0 and 19.0.\nI check the start script file of icemcfd at \u0026ldquo;ansys_inc/v191/icemcfd/linux64_amd/bin\u0026rdquo;. There are two solutions:\nSolution 1 If you don\u0026rsquo;t want to change the icemcfd start script, just run the following command:\n1 icemcfd -log tmp.log -log is a icemcfd argument, tmp.log is the log file generated at your pwd.\nSolution 2 If you use other argument when you start icemcfd, the following solution may be not very good. (I don\u0026rsquo;t use arguments when start icemcfd, so it works well for me) First- cd to your icemcfd bin dir:\n1 cd /usr/ansys_inc/v191/icemcfd/linux64_amd/bin Then: edit the icemcfd shell script by any text editor you want, here we use gvim:\n1 gvim icemcfd change line 607: from eval \u0026quot;$ICEM_ACN/bin/med\u0026quot; \u0026quot;$args\u0026quot; to \u0026quot;$ICEM_ACN/bin/med\u0026quot; $args or $ICEM_ACN/bin/med\n","date":"2018-09-26T00:00:00Z","permalink":"https://TimoLin.github.io/p/icemcfd-18.0/19.0-start-problem-in-ubuntu-18.04/","title":"ICEMCFD 18.0/19.0 start problem in UBUNTU 18.04"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://TimoLin.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://TimoLin.github.io/p/image-gallery/2_hubce42636ecacc1a380b462f3110efcec_37455_120x120_fill_q75_box_smart1.jpg","permalink":"https://TimoLin.github.io/p/image-gallery/","title":"Image gallery"},{"content":"For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\n","date":"2023-08-25T00:00:00Z","image":"https://TimoLin.github.io/p/shortcodes/cover_huec3c3e34981507583e214021ad1b9a4b_12942_120x120_fill_q75_box_smart1.jpg","permalink":"https://TimoLin.github.io/p/shortcodes/","title":"Shortcodes"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi $$\n1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://TimoLin.github.io/p/math-typesetting/","title":"Math Typesetting"}]